# Generated by Django 4.2.5 on 2024-08-13 18:38

import dirtyfields.dirtyfields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sst_answer', models.TextField(blank=True, null=True)),
                ('ro_answer', models.JSONField(blank=True, help_text='Submitted paragraph order', null=True)),
                ('rmmcq_answer', models.JSONField(blank=True, help_text='Submitted options', null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('score', models.IntegerField(blank=True, help_text='Total score for the answer', null=True)),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='QuestionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(choices=[('SST', 'Summarize Spoken Text'), ('RO', 'Re-Order Paragraph'), ('RMMCQ', 'Reading Multiple Choice (Multiple)')], max_length=10, unique=True)),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RMMCQQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('passage', models.TextField()),
                ('options', models.JSONField(help_text='List of options')),
                ('correct_options', models.JSONField(help_text='List of correct options')),
                ('question_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PTEPractice.questiontype')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ROQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('paragraphs', models.JSONField(help_text='List of paragraphs in random order')),
                ('correct_order', models.JSONField(help_text='List of paragraphs in correct order')),
                ('question_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PTEPractice.questiontype')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SSTQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('time_limit', models.IntegerField(help_text='Time limit in seconds')),
                ('audios', models.JSONField(help_text="JSON format: [{'speaker': 'name', 'audio_file': 'path'}]")),
                ('reference_summary', models.TextField(help_text="This will contain the key points expected in the student's summary.")),
                ('question_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PTEPractice.questiontype')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TestSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('rmmcq_questions', models.ManyToManyField(blank=True, to='PTEPractice.rmmcqquestion')),
                ('ro_questions', models.ManyToManyField(blank=True, to='PTEPractice.roquestion')),
                ('sst_questions', models.ManyToManyField(blank=True, to='PTEPractice.sstquestion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SSTScoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_score', models.IntegerField()),
                ('form_score', models.IntegerField()),
                ('grammar_score', models.IntegerField()),
                ('vocabulary_score', models.IntegerField()),
                ('spelling_score', models.IntegerField()),
                ('total_score', models.IntegerField()),
                ('answer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='PTEPractice.answer')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ROScoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('correct_pairs', models.IntegerField(help_text='Number of correctly ordered adjacent pairs')),
                ('total_score', models.IntegerField()),
                ('answer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='PTEPractice.answer')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RMMCQScoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('correct_choices', models.IntegerField(help_text='Number of correct choices selected')),
                ('incorrect_choices', models.IntegerField(help_text='Number of incorrect choices selected')),
                ('total_score', models.IntegerField()),
                ('answer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='PTEPractice.answer')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.AddField(
            model_name='answer',
            name='rmmcq_question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='PTEPractice.rmmcqquestion'),
        ),
        migrations.AddField(
            model_name='answer',
            name='ro_question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='PTEPractice.roquestion'),
        ),
        migrations.AddField(
            model_name='answer',
            name='sst_question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='PTEPractice.sstquestion'),
        ),
        migrations.AddField(
            model_name='answer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
